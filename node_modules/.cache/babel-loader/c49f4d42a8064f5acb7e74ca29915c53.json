{"ast":null,"code":"var _jsxFileName = \"/home/smp/workspace/practice-project/react-graphql-github-apollo-starter-kit/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport registerServiceWorker from './registerServiceWorker';\nimport App from './App';\nimport './style.css';\nvar GITHUB_BASE_URL = 'https://api.github.com/graphql';\nvar httpLink = new HttpLink({\n  uri: GITHUB_BASE_URL,\n  headers: {\n    authorization: \"Bearer \".concat(process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN)\n  }\n});\nvar errorLink = onError(function (_ref) {\n  var graphQLErrors = _ref.graphQLErrors,\n      networkError = _ref.networkError;\n\n  if (graphQLErrors) {//do something\n  }\n\n  if (networkError) {//do something\n  }\n});\nvar link = ApolloLink.from([errorLink, httpLink]);\nvar cache = new InMemoryCache();\nvar client = new ApolloClient({\n  link: link,\n  cache: cache\n});\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n})), document.getElementById('root'));\nregisterServiceWorker();","map":{"version":3,"sources":["/home/smp/workspace/practice-project/react-graphql-github-apollo-starter-kit/src/index.js"],"names":["React","ReactDOM","ApolloProvider","ApolloClient","ApolloLink","HttpLink","onError","InMemoryCache","registerServiceWorker","App","GITHUB_BASE_URL","httpLink","uri","headers","authorization","process","env","REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN","errorLink","graphQLErrors","networkError","link","from","cache","client","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,aAAP;AAEA,IAAMC,eAAe,GAAG,gCAAxB;AAEA,IAAMC,QAAQ,GAAG,IAAIN,QAAJ,CAAa;AAC5BO,EAAAA,GAAG,EAAEF,eADuB;AAE5BG,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,mBACXC,OAAO,CAACC,GAAR,CAAYC,sCADD;AADN;AAFmB,CAAb,CAAjB;AASA,IAAMC,SAAS,GAAGZ,OAAO,CAAC,gBAAqC;AAAA,MAAlCa,aAAkC,QAAlCA,aAAkC;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AAC7D,MAAID,aAAJ,EAAmB,CACjB;AACD;;AAED,MAAIC,YAAJ,EAAkB,CAChB;AACD;AACF,CARwB,CAAzB;AAUA,IAAMC,IAAI,GAAGjB,UAAU,CAACkB,IAAX,CAAgB,CAACJ,SAAD,EAAYP,QAAZ,CAAhB,CAAb;AAEA,IAAMY,KAAK,GAAG,IAAIhB,aAAJ,EAAd;AAEA,IAAMiB,MAAM,GAAG,IAAIrB,YAAJ,CAAiB;AAC9BkB,EAAAA,IAAI,EAAJA,IAD8B;AAE9BE,EAAAA,KAAK,EAALA;AAF8B,CAAjB,CAAf;AAKAtB,QAAQ,CAACwB,MAAT,CACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAED,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF;AAOAnB,qBAAqB","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { HttpLink } from 'apollo-link-http'\nimport { onError } from 'apollo-link-error'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nimport registerServiceWorker from './registerServiceWorker'\nimport App from './App'\nimport './style.css'\n\nconst GITHUB_BASE_URL = 'https://api.github.com/graphql'\n\nconst httpLink = new HttpLink({\n  uri: GITHUB_BASE_URL,\n  headers: {\n    authorization: `Bearer ${\n      process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN\n    }`,\n  },\n})\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    //do something\n  }\n\n  if (networkError) {\n    //do something\n  }\n})\n\nconst link = ApolloLink.from([errorLink, httpLink])\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  link,\n  cache,\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n\nregisterServiceWorker()\n"]},"metadata":{},"sourceType":"module"}